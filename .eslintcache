[{"/Users/20arjuna/Desktop/trickme2/src/reportWebVitals.js":"1","/Users/20arjuna/Desktop/trickme2/src/App.js":"2","/Users/20arjuna/Desktop/trickme2/src/index.js":"3","/Users/20arjuna/Desktop/trickme2/src/components/Form.js":"4","/Users/20arjuna/Desktop/trickme2/src/components/Header.js":"5","/Users/20arjuna/Desktop/trickme2/src/components/MyInfo.js":"6","/Users/20arjuna/Desktop/trickme2/src/components/IntroText.js":"7","/Users/20arjuna/Desktop/trickme2/src/components/SuggestionDisplay.js":"8"},{"size":362,"mtime":1608429891143,"results":"9","hashOfConfig":"10"},{"size":605,"mtime":1608492962097,"results":"11","hashOfConfig":"10"},{"size":670,"mtime":1608488035559,"results":"12","hashOfConfig":"10"},{"size":4075,"mtime":1608490490203,"results":"13","hashOfConfig":"10"},{"size":644,"mtime":1608479589082,"results":"14","hashOfConfig":"10"},{"size":299,"mtime":1608434299751,"results":"15","hashOfConfig":"10"},{"size":381,"mtime":1608434299750,"results":"16","hashOfConfig":"10"},{"size":948,"mtime":1608493097509,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ykxm86",{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"24","messages":"25","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/20arjuna/Desktop/trickme2/src/reportWebVitals.js",[],"/Users/20arjuna/Desktop/trickme2/src/App.js",["35"],"/Users/20arjuna/Desktop/trickme2/src/index.js",["36"],"/Users/20arjuna/Desktop/trickme2/src/components/Form.js",["37","38"],"import React, { Component } from 'react';\nimport axios from 'axios';\nimport { CircularProgress, Button } from '@material-ui/core';\nimport TextField from '@material-ui/core/TextField';\nimport { sizing } from '@material-ui/system';\n\n//import { Button } from \"semantic-ui-react\";\n\n// const styles = {\n//     //style for font size\n//     resize:{\n//         fontSize:500\n//     },\n// }\n\n\nfunction ButtonComponent(props) {\n  const { loading } = props;\n  return (\n    <Button variant=\"contained\"\n            color=\"primary\"\n            size=\"large\"\n            type=\"submit\"\n            disabled={loading}>\n      {loading && <CircularProgress size={14} />}\n      {!loading && 'Go!'}\n    </Button>\n  );\n}\n\nclass Form extends Component {\n\n    constructor(props)\n    {\n        super(props)\n\n        this.state = {\n            question: '',\n            loading: false\n        };\n    }\n\n    handleQuestionChange = (event) => {\n        this.setState({question: event.target.value})\n    }\n\n    submitHandler = (event) => {\n        event.preventDefault()\n        this.setState({ loading: true });\n        setTimeout(() => this.setState({ loading: false }), 3000); //3 seconds\n        //console.log(this.state)\n        console.log(this.state.question)\n        axios.post('/link', this.state)\n            .then(response => {\n                console.log(response)\n            })\n            .catch(error => {\n                console.log(error)\n            })\n    }\n\n\n    render() {\n        return(\n                <div>\n                <form onSubmit={this.submitHandler}>\n                    {/*<textarea\n                        value = {this.state.question}\n                        onChange={this.handleQuestionChange}\n                        rows = \"4\"\n                        cols = \"50\"\n                        name =\"textInput\"\n                        placeholder=\"Enter question here\"\n                    />*/}\n                    <TextField\n                        InputProps={{ style: { fontSize: 15 } }}\n                        id=\"outlined-multiline-static\"\n                        label={<span style={{ fontSize: 15 }}>Enter Question Here</span>}\n                        value = {this.state.question}\n                        onChange={this.handleQuestionChange}\n                        multiline\n                        rows={10}\n                        style = {{width: 500}}\n\n                        variant=\"outlined\"\n                    />\n                    <h5></h5>\n\n                    {/*}<input className = \"center\"\n                           type=\"submit\"\n                           name=\"my-form\"\n                           value=\"Link Entities\">\n                    </input>*/}\n\n                    {/*}<Button size=\"large\"\n                            variant=\"contained\"\n                            color=\"primary\"\n                            type=\"submit\">\n                    Go!\n                    </Button>*/}\n\n                    <ButtonComponent loading={this.state.loading} />\n\n                    {/*<Button\n                    onClick={async () => {\n                        //const movie = { title, rating };\n                        const response = await fetch(\"/link\", {\n                            method: \"POST\",\n                            headers: {\n                                \"Content-Type\": \"application/json\"\n                            },\n                            body: JSON.stringify({\"question\": this.state.question})\n                        });\n\n                        if (response.ok) {\n                            console.log(\"response worked!\");\n                            // onNewMovie(movie);\n                            // setTitle(\"\");\n                            // setRating(1);\n                        }\n                        else\n                        {\n                            console.log(\"error\");\n                        }\n                    }}\n                    >\n                    submit\n                    </Button>*/}\n                </form>\n            </div>\n\n        )\n    }\n}\nexport default Form\n","/Users/20arjuna/Desktop/trickme2/src/components/Header.js",[],"/Users/20arjuna/Desktop/trickme2/src/components/MyInfo.js",[],"/Users/20arjuna/Desktop/trickme2/src/components/IntroText.js",[],"/Users/20arjuna/Desktop/trickme2/src/components/SuggestionDisplay.js",["39","40","41"],{"ruleId":"42","severity":1,"message":"43","line":1,"column":8,"nodeType":"44","messageId":"45","endLine":1,"endColumn":12},{"ruleId":"42","severity":1,"message":"46","line":6,"column":8,"nodeType":"44","messageId":"45","endLine":6,"endColumn":14},{"ruleId":"42","severity":1,"message":"47","line":5,"column":10,"nodeType":"44","messageId":"45","endLine":5,"endColumn":16},{"ruleId":"48","severity":1,"message":"49","line":87,"column":21,"nodeType":"50","endLine":87,"endColumn":25},{"ruleId":"42","severity":1,"message":"51","line":2,"column":28,"nodeType":"44","messageId":"45","endLine":2,"endColumn":36},{"ruleId":"42","severity":1,"message":"52","line":2,"column":38,"nodeType":"44","messageId":"45","endLine":2,"endColumn":47},{"ruleId":"48","severity":1,"message":"49","line":20,"column":17,"nodeType":"50","endLine":20,"endColumn":21},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'MyInfo' is defined but never used.","'sizing' is defined but never used.","jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","JSXOpeningElement","'useState' is defined but never used.","'useEffect' is defined but never used."]